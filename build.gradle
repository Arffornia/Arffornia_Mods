import java.security.MessageDigest
import java.nio.file.Files

plugins {
    id 'java-library'
    id 'com.github.breadmoirai.github-release' version '2.4.1'
    id 'net.neoforged.moddev' version '2.0.99'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    // Add here additional repositories if required by some of the dependencies below.
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

githubRelease {
    def githubToken = System.getenv("GITHUB_TOKEN")
    if (githubToken) {
        token = githubToken
    }

    def repoOwner = System.getenv("GITHUB_REPOSITORY_OWNER")
    if (repoOwner) {
        owner = repoOwner
    }

    repo = project.name
    tagName = "v${project.version}"
    releaseName = "Release ${project.version}"

    releaseAssets.from(tasks.jar.outputs.files)
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            programArgument('--username=The_Gost_sniper')
            programArgument('--uuid=8267fbb3-021b-40ce-93ea-2a3c92feaa4c')
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'com.zaxxer:HikariCP:5.1.0'

    jarJar(implementation("org.postgresql:postgresql:42.7.3")) {
        version {
            strictly '[42.0,43.0)'
            prefer '42.7.3'
        }
    }

    jarJar(implementation("com.zaxxer:HikariCP:5.1.0")) {
        version {
            strictly '[5.0,6.0)'
            prefer '5.1.0'
        }
    }

    additionalRuntimeClasspath "org.postgresql:postgresql:42.7.3"
    additionalRuntimeClasspath "com.zaxxer:HikariCP:5.1.0"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}